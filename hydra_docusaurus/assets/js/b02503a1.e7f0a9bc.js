"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8399],{1391:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"hydra-js-client/examples/commiting-utxos-to-hydra","title":"Using CIP-30 Interface","description":"The Kuber Hydra Client can be integrated with a CIP-30 compatible wallet to sign transactions. This guide demonstrates how to set up and use a Cip30ShelleyWallet with the KuberHydraApiProvider.","source":"@site/docs/hydra-js-client/examples/commiting-utxos-to-hydra.md","sourceDirName":"hydra-js-client/examples","slug":"/hydra-js-client/examples/commiting-utxos-to-hydra","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/examples/commiting-utxos-to-hydra","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/examples/commiting-utxos-to-hydra.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Commiting - Using cip-30"},"sidebar":"hydraJsClient","previous":{"title":"Working with Wallets","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/examples/working-with-wallets"},"next":{"title":"Building and Submitting TXs","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/examples/submitting-hydra-transactions"}}');var i=n(4848),s=n(8453);const r={sidebar_position:2,sidebar_label:"Commiting - Using cip-30"},o="Using CIP-30 Interface",l={},d=[{value:"Prerequisites",id:"prerequisites",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"using-cip-30-interface",children:"Using CIP-30 Interface"})}),"\n",(0,i.jsxs)(t.p,{children:["The Kuber Hydra Client can be integrated with a CIP-30 compatible wallet to sign transactions. This guide demonstrates how to set up and use a ",(0,i.jsx)(t.code,{children:"Cip30ShelleyWallet"})," with the ",(0,i.jsx)(t.code,{children:"KuberHydraApiProvider"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Node.js environment"}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"libcardano"})," and ",(0,i.jsx)(t.code,{children:"libcardano-wallet"})," installed."]}),"\n",(0,i.jsxs)(t.li,{children:["Access to a running Hydra node and its credentials (e.g., ",(0,i.jsx)(t.code,{children:"node.addr"}),", ",(0,i.jsx)(t.code,{children:"funds.sk"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This example demonstrates how to set up a ",(0,i.jsx)(t.code,{children:"Cip30ShelleyWallet"})," and use it to sign and submit a transaction to a Hydra Head."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'import { readFileSync } from "fs";\nimport { loadCrypto, Ed25519Key, Value } from "libcardano";\nimport { ShelleyWallet, Cip30ShelleyWallet } from "libcardano-wallet";\nimport { KuberHydraApiProvider } from "../../../src/service/KuberHydraApiProvider"; // Adjust path as needed\nimport { UTxO } from "libcardano/cardano/serialization";\n\nasync function runCip30CommitExample() {\n  // Initialize Hydra API Provider\n  const hydra = new KuberHydraApiProvider("http://172.31.6.1:8082"); // Replace with your Hydra node URL\n\n  // Load node address and test wallet signing key\n  const node_addr_path = process.env.HOME + "/.cardano/preview/hydra-0/credentials/node.addr";\n  const nodeAddr = readFileSync(node_addr_path).toString("utf-8").trim();\n  const testWalletSigningKey = await Ed25519Key.fromCardanoCliJson(\n    JSON.parse(readFileSync(process.env.HOME + "/.cardano/preview/hydra-0/credentials/funds.sk", "utf-8")),\n  );\n\n  // Setup libcardano crypto and Shelley wallet\n  await loadCrypto();\n  const shelleyWallet = new ShelleyWallet(testWalletSigningKey);\n  console.log("Wallet", shelleyWallet.toJSON());\n\n  // Create Cip30ShelleyWallet instance\n  // The first two arguments are for the L1 API provider and the Hydra API provider, respectively.\n  // In this case, KuberHydraApiProvider implements both interfaces.\n  const cip30Wallet = new Cip30ShelleyWallet(hydra, hydra, shelleyWallet, 0);\n  const walletAddress = (await cip30Wallet.getChangeAddress()).toBech32();\n\n  console.log("Wallet Address:", walletAddress);\n\n  // Ensure head is in \'Initial\' state before committing\n  const headState = await hydra.queryHeadState();\n  if (headState.state !== "Initial") {\n    console.log("Head is not in \'Initial\' state. Skipping commit example.");\n    return;\n  }\n\n  // Query UTxOs from the L1 chain using the wallet address\n  const l1Utxos = await hydra.l1Api.queryUTxOByAddress(walletAddress);\n  if (l1Utxos.length === 0) {\n    throw new Error(`No balance on ${walletAddress} in L1 chain`);\n  }\n\n  // Select UTxOs to commit (e.g., the first one with a value greater than 4 ADA)\n  const selectedUtxos = l1Utxos.filter((x: UTxO) => x.txOut.value.greaterThan(Value.fromString("4A")));\n  if (selectedUtxos.length === 0) {\n    throw new Error(`Not enough balance on ${walletAddress} in L1 chain for commit example`);\n  }\n\n  const txIn = selectedUtxos[0].txIn;\n  const utxoToCommit = [`${txIn.txHash.toString("hex")}#${txIn.index}`];\n\n  // Build the commit transaction using Hydra API\n  const commitResult = await hydra.commit({ utxos: utxoToCommit });\n  console.log("Transaction to be signed:", commitResult.hash);\n\n  // Sign the transaction using the CIP-30 wallet\n  const signResult = await cip30Wallet.signTx(commitResult.cborHex);\n\n  // Submit the signed transaction to the L1 chain\n  await hydra.l1Api.submitTx(signResult.updatedTxBytes.toString("hex"));\n  console.log("Submitted Commit transaction hash:", commitResult.hash);\n\n  // Wait for the transaction to be confirmed and head state to change\n  await hydra.l1Api.waitForUtxoConsumption(selectedUtxos[0].txIn, 280000);\n  console.log("Commit transaction confirmed.");\n\n}\n\nrunCip30CommitExample();\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);