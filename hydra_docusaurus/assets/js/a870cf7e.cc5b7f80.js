"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5322],{3299:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"hydra-js-client/examples/working-with-wallets","title":"Working with Wallets","description":"This guide demonstrates how to interact with wallets to query UTxOs from both the Layer 1 (L1) Cardano chain and the Hydra Head using the KuberHydraApiProvider. We will use same cip30 interface  for htis example","source":"@site/docs/hydra-js-client/examples/working-with-wallets.md","sourceDirName":"hydra-js-client/examples","slug":"/hydra-js-client/examples/working-with-wallets","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/examples/working-with-wallets","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/examples/working-with-wallets.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Working with Wallets"},"sidebar":"hydraJsClient","previous":{"title":"\ud83d\ude80 Installation & Quick Start","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/installation"},"next":{"title":"Commiting - Using cip-30","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/examples/commiting-utxos-to-hydra"}}');var t=n(4848),r=n(8453);const s={sidebar_position:1,sidebar_label:"Working with Wallets"},i="Working with Wallets",d={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Example: Querying UTxOs from L1 and Hydra",id:"example-querying-utxos-from-l1-and-hydra",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"working-with-wallets",children:"Working with Wallets"})}),"\n",(0,t.jsxs)(a.p,{children:["This guide demonstrates how to interact with wallets to query UTxOs from both the Layer 1 (L1) Cardano chain and the Hydra Head using the ",(0,t.jsx)(a.code,{children:"KuberHydraApiProvider"}),". We will use same cip30 interface  for htis example"]}),"\n",(0,t.jsx)(a.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Node.js environment"}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"libcardano"})," and ",(0,t.jsx)(a.code,{children:"libcardano-wallet"})," installed."]}),"\n",(0,t.jsxs)(a.li,{children:["Access to a running Hydra node and its credentials (e.g., ",(0,t.jsx)(a.code,{children:"node.addr"}),", ",(0,t.jsx)(a.code,{children:"funds.sk"}),")."]}),"\n",(0,t.jsx)(a.li,{children:'An active Hydra Head (can be in any state, but "Open" is ideal for demonstrating Hydra UTxOs).'}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"example-querying-utxos-from-l1-and-hydra",children:"Example: Querying UTxOs from L1 and Hydra"}),"\n",(0,t.jsx)(a.p,{children:"This example sets up a wallet and then queries its UTxOs on both the L1 chain and within the Hydra Head."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-typescript",children:'import { readFileSync } from "fs";\nimport { loadCrypto, Ed25519Key } from "libcardano";\nimport { ShelleyWallet, Cip30ShelleyWallet } from "libcardano-wallet";\nimport { KuberHydraApiProvider } from "kuber-client"; // Adjust path as needed\n\nasync function runWalletQueryExample() {\n  // Initialize Hydra API Provider\n  const hydra = new KuberHydraApiProvider("http://172.31.6.1:8082"); // Replace with your Hydra node URL\n\n  // Load test wallet signing key\n  const testWalletSigningKey = await Ed25519Key.fromCardanoCliJson(\n    JSON.parse(readFileSync(process.env.HOME + "/.cardano/preview/hydra-0/credentials/funds.sk", "utf-8")),\n  );\n\n  // Setup libcardano crypto and Shelley wallet\n  await loadCrypto();\n  const shelleyWallet = new ShelleyWallet(testWalletSigningKey);\n  console.log("Base Shelley Wallet:", shelleyWallet.toJSON());\n\n  // Create a wallet instance for Hydra operations\n  const hydraWallet = new Cip30ShelleyWallet(hydra, hydra, shelleyWallet, 0);\n  const hydraWalletAddress = (await hydraWallet.getChangeAddress()).toBech32();\n  console.log("Hydra Wallet Address:", hydraWalletAddress);\n\n  // Create a wallet instance for Layer 1 (L1) operations\n  // Pass hydra.l1Api as both L1 and Hydra API provider for this wallet,\n  // as it only interacts with L1.\n  const layer1Wallet = new Cip30ShelleyWallet(hydra.l1Api, hydra.l1Api, shelleyWallet, 0);\n  const layer1WalletAddress = (await layer1Wallet.getChangeAddress()).toBech32();\n  console.log("Layer 1 Wallet Address:", layer1WalletAddress);\n\n\n\n  console.log("\\n--- Querying Balance from Layer 1 (L1) Chain using layer1Wallet ---");\n  // Use the layer1Wallet\'s getBalance() method (CIP-30)\n  const l1Balance = await layer1Wallet.getBalance();\n  console.log(`L1 Balance for address ${layer1WalletAddress}: ${l1Balance.lovelace} lovelace`);\n\n  console.log("\\n--- Querying Balance from Hydra Head using hydraWallet ---");\n  // Use the hydraWallet\'s getBalance() method (CIP-30)\n  const hydraBalance = await hydraWallet.getBalance();\n  console.log(`Hydra Head Balance for address ${hydraWalletAddress}: ${hydraBalance.lovelace} lovelace`);\n\n}\n\nrunWalletQueryExample();\n'})}),"\n",(0,t.jsxs)(a.p,{children:["This example demonstrates how to use the ",(0,t.jsx)(a.code,{children:"KuberHydraApiProvider"})," to query the balance of wallets from both the underlying L1 chain (via ",(0,t.jsx)(a.code,{children:"hydra.l1Api"}),") and directly from the Hydra Head. This is crucial for understanding the state of funds available to your wallet in both environments."]})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>i});var l=n(6540);const t={},r=l.createContext(t);function s(e){const a=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),l.createElement(r.Provider,{value:a},e.children)}}}]);