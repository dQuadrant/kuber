"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2443],{5874:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"architecture","title":"Project Technical Details","description":"APIs / JSON RPC to Implement","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/kuber/hydra_docusaurus/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"architecture","next":{"title":"Sequence Diagrams","permalink":"/kuber/hydra_docusaurus/docs/sequenceDiagrams"}}');var r=s(4848),t=s(8453);const a={},d="Project Technical Details",l={},c=[{value:"APIs / JSON RPC to Implement",id:"apis--json-rpc-to-implement",level:2},{value:"\ud83d\udd0e Query API",id:"-query-api",level:3},{value:"\ud83c\udfd7 Transaction Build API",id:"-transaction-build-api",level:3},{value:"\ud83d\udd01 Hydra Relay API",id:"-hydra-relay-api",level:3},{value:"Technical Architecture",id:"technical-architecture",level:2},{value:"\ud83e\udded High-Level Overview",id:"-high-level-overview",level:3},{value:"\ud83e\uddf1 Components &amp; Flows",id:"-components--flows",level:3},{value:"1. <strong>Kuber Playground</strong>",id:"1-kuber-playground",level:4},{value:"2. <strong>Kuber Backend</strong>",id:"2-kuber-backend",level:4},{value:"a. <strong>Transaction JSON</strong>",id:"a-transaction-json",level:4},{value:"b. <strong>JSON Formatter / Tx Builder</strong>",id:"b-json-formatter--tx-builder",level:4},{value:"c. <strong>Hydra Head State / Info</strong>",id:"c-hydra-head-state--info",level:4},{value:"d. <strong>Hydra Head State \u2192 Transaction Builder</strong>",id:"d-hydra-head-state--transaction-builder",level:4},{value:"e. <strong>Unsigned Transaction</strong>",id:"e-unsigned-transaction",level:4},{value:"f. <strong>Wallet / Signing Key</strong>",id:"f-wallet--signing-key",level:4},{value:"g. <strong>Signed Transaction</strong>",id:"g-signed-transaction",level:4},{value:"3. <strong>WebSocket Connector</strong>",id:"3-websocket-connector",level:4},{value:"4. <strong>Hydra Node</strong>",id:"4-hydra-node",level:4},{value:"\ud83d\udd04 Key Data Flows",id:"-key-data-flows",level:3},{value:"Components Overview",id:"components-overview",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"project-technical-details",children:"Project Technical Details"})}),"\n",(0,r.jsx)(n.h2,{id:"apis--json-rpc-to-implement",children:"APIs / JSON RPC to Implement"}),"\n",(0,r.jsx)(n.h3,{id:"-query-api",children:"\ud83d\udd0e Query API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"queryUtxosByAddress"}),": Retrieve UTXOs owned by a specific address within a Hydra Head."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"queryUtxosByTxIn"}),": Retrieve UTXO information using a specific transaction hash and / or index."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"queryProtocolParameters"}),": Return hydra protocol parameters used while initializing the hydra node."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"queryHydraState"}),": Retrieve current state of a Hydra Head (phases include: ",(0,r.jsx)(n.code,{children:"Idle"}),", ",(0,r.jsx)(n.code,{children:"Initial"}),", ",(0,r.jsx)(n.code,{children:"Open"}),", ",(0,r.jsx)(n.code,{children:"Closed"}),", ",(0,r.jsx)(n.code,{children:"Fanout"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-transaction-build-api",children:"\ud83c\udfd7 Transaction Build API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Accept JSON-based transaction definitions as input."}),"\n",(0,r.jsx)(n.li,{children:"Construct transactions according to Kuber\u2019s transaction specification, modified to work with Hydra protocol parameters."}),"\n",(0,r.jsx)(n.li,{children:"Automatically handle fee balancing and validation."}),"\n",(0,r.jsx)(n.li,{children:"Support submission and reporting of success or error messages (e.g., invalid transaction structure)."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-hydra-relay-api",children:"\ud83d\udd01 Hydra Relay API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"initializeHead"}),": Start a new Hydra Head."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"commitUtxos"}),": Add UTXOs to the Hydra Head."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"decommitUtxos"}),": Withdraw UTXOs from the Hydra Head."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"closeHead"}),": Signal intent to close the Hydra Head."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"contestHead"}),": Contest the Hydra Head after closing and before fanout."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"abortHead"}),": Abort the Head in case of failure or deadlock."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fanoutTransaction"}),": Submit the final fanout transaction after Head closure."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These APIs will be exposed as REST endpoints and integrated with a WebSocket backend to provide real-time feedback to users."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"technical-architecture",children:"Technical Architecture"}),"\n",(0,r.jsxs)(n.p,{children:["A draft diagram is available ",(0,r.jsx)(n.a,{href:"https://raw.githubusercontent.com/drep-id/image/main/preview/kuber-hydra_20250417075127614.png",children:"here"}),"."]}),"\n",(0,r.jsx)("img",{alt:"Hydra Architecture Diagram",src:"https://raw.githubusercontent.com/dQuadrant/kuber/88c3fe0b1e721e5e4fb8e4bcd9e50f10b570f628/hydra/sequence-diagrams/hydra-architecture.png"}),"\n",(0,r.jsx)(n.h3,{id:"-high-level-overview",children:"\ud83e\udded High-Level Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The architecture illustrates how the ",(0,r.jsx)(n.strong,{children:"Kuber backend"})," interfaces with a ",(0,r.jsx)(n.strong,{children:"Hydra node"})," to enable the construction and submission of transactions within a Hydra Head. It also includes developer tooling such as the ",(0,r.jsx)(n.strong,{children:"Kuber Playground"}),", and various internal components for formatting, building, and communicating via WebSocket."]}),"\n",(0,r.jsx)(n.h3,{id:"-components--flows",children:"\ud83e\uddf1 Components & Flows"}),"\n",(0,r.jsxs)(n.h4,{id:"1-kuber-playground",children:["1. ",(0,r.jsx)(n.strong,{children:"Kuber Playground"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A frontend or client library for experimenting with Kuber APIs."}),"\n",(0,r.jsxs)(n.li,{children:["Construct and Send ",(0,r.jsx)(n.strong,{children:"Transaction JSON"})," (in a Kuber-native-json format) to the backend for processing."]}),"\n",(0,r.jsx)(n.li,{children:"Connects with browser wallet."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2-kuber-backend",children:["2. ",(0,r.jsx)(n.strong,{children:"Kuber Backend"})]}),"\n",(0,r.jsx)(n.p,{children:"The heart of the architecture, composed of several interconnected subcomponents:"}),"\n",(0,r.jsxs)(n.h4,{id:"a-transaction-json",children:["a. ",(0,r.jsx)(n.strong,{children:"Transaction JSON"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The input from users (via Playground or API calls)."}),"\n",(0,r.jsx)(n.li,{children:"Defines what UTxOs to use, where to send funds, metadata, etc."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"b-json-formatter--tx-builder",children:["b. ",(0,r.jsx)(n.strong,{children:"JSON Formatter / Tx Builder"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parses the incoming JSON into a transaction skeleton."}),"\n",(0,r.jsxs)(n.li,{children:["Constructs a ",(0,r.jsx)(n.strong,{children:"valid unsigned transaction"})," using Hydra\u2019s protocol parameters."]}),"\n",(0,r.jsx)(n.li,{children:"Ensures all required data (like fee calculation, input/output balancing) is handled automatically."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"c-hydra-head-state--info",children:["c. ",(0,r.jsx)(n.strong,{children:"Hydra Head State / Info"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Internally tracked by the backend."}),"\n",(0,r.jsxs)(n.li,{children:["Includes:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Current phase (e.g., idle, open, closed)"}),"\n",(0,r.jsx)(n.li,{children:"Participants"}),"\n",(0,r.jsx)(n.li,{children:"UTXOs available in the Head"}),"\n",(0,r.jsx)(n.li,{children:"Snapshots (state of UTXO set at different points)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"d-hydra-head-state--transaction-builder",children:["d. ",(0,r.jsx)(n.strong,{children:"Hydra Head State \u2192 Transaction Builder"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"transaction builder"})," consumes the current Hydra head state to determine:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Which UTXOs are available"}),"\n",(0,r.jsx)(n.li,{children:"Who the valid participants are"}),"\n",(0,r.jsx)(n.li,{children:"Which constraints apply to the transaction"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This ensures that the transaction being built is ",(0,r.jsx)(n.strong,{children:"valid within the Hydra Head context"}),", not just on Layer 1."]}),"\n",(0,r.jsxs)(n.h4,{id:"e-unsigned-transaction",children:["e. ",(0,r.jsx)(n.strong,{children:"Unsigned Transaction"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"After JSON processing and validation against the Hydra head state, an unsigned transaction is created and passed downstream for signing."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"f-wallet--signing-key",children:["f. ",(0,r.jsx)(n.strong,{children:"Wallet / Signing Key"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["External or embedded component used to ",(0,r.jsx)(n.strong,{children:"sign"})," the transaction."]}),"\n",(0,r.jsx)(n.li,{children:"May use local signing keys or delegate to an external wallet provider."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"g-signed-transaction",children:["g. ",(0,r.jsx)(n.strong,{children:"Signed Transaction"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The completed transaction ready to be submitted to the Hydra node."}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"3-websocket-connector",children:["3. ",(0,r.jsx)(n.strong,{children:"WebSocket Connector"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A critical module for real-time communication with the ",(0,r.jsx)(n.strong,{children:"Hydra Node"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Establishes a ",(0,r.jsx)(n.strong,{children:"WebSocket connection"})," using the provided ",(0,r.jsx)(n.strong,{children:"IP and port"})," (configurable by the user)."]}),"\n",(0,r.jsxs)(n.li,{children:["Allows:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Submitting signed transactions"}),"\n",(0,r.jsx)(n.li,{children:"Receiving real-time Hydra head updates"}),"\n",(0,r.jsx)(n.li,{children:"Listening to participant activity, state changes, and log events"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"4-hydra-node",children:["4. ",(0,r.jsx)(n.strong,{children:"Hydra Node"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A running instance of the Hydra protocol node."}),"\n",(0,r.jsx)(n.li,{children:"Works in conjunction with a Cardano Layer 1 node for finality and chain interaction."}),"\n",(0,r.jsxs)(n.li,{children:["Accepts:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WebSocket messages"})," for control commands and transaction submission"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Provides:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Real-time updates on head state, snapshots, participant actions, and UTXO changes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-key-data-flows",children:"\ud83d\udd04 Key Data Flows"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Source"}),(0,r.jsx)(n.th,{children:"Destination"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Playground"}),(0,r.jsx)(n.td,{children:"Kuber Backend"}),(0,r.jsx)(n.td,{children:"Sends raw transaction request in JSON"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"JSON Formatter"}),(0,r.jsx)(n.td,{children:"Tx Builder"}),(0,r.jsx)(n.td,{children:"Converts JSON into internal format for construction"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Hydra Head State"}),(0,r.jsx)(n.td,{children:"Tx Builder"}),(0,r.jsx)(n.td,{children:"Feeds contextual info like UTXOs and participants"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Tx Builder"}),(0,r.jsx)(n.td,{children:"Wallet/Signer"}),(0,r.jsx)(n.td,{children:"Passes unsigned transaction to be signed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Wallet"}),(0,r.jsx)(n.td,{children:"WebSocket Connector"}),(0,r.jsx)(n.td,{children:"Passes signed transaction for broadcast"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Kuber WS Connector"}),(0,r.jsx)(n.td,{children:"Hydra Node"}),(0,r.jsx)(n.td,{children:"Communicates via WebSocket: transaction submission & state queries/responses"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"This architecture supports a fully interactive development and production environment where:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Users define transactions via a JSON interface (API or playground)."}),"\n",(0,r.jsx)(n.li,{children:"Kuber formats, validates, and constructs transactions using Hydra context."}),"\n",(0,r.jsx)(n.li,{children:"Transactions are signed and submitted over WebSocket to a Hydra node."}),"\n",(0,r.jsx)(n.li,{children:"The system maintains a mirrored view of Hydra state and simplifies all interactions for the user."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"components-overview",children:"Components Overview"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kuber Server (Haskell, Cabal)"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Handles JSON input for transaction requests."}),"\n",(0,r.jsx)(n.li,{children:"Builds transactions using Hydra protocol parameters."}),"\n",(0,r.jsx)(n.li,{children:"Relays transactions and commands to Hydra nodes."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hydra Node"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Managed by the user."}),"\n",(0,r.jsx)(n.li,{children:"Listens for WebSocket commands and responds with state updates."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kuber WebSocket Proxy"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Connects to the Hydra node WebSocket."}),"\n",(0,r.jsx)(n.li,{children:"Translates and structures messages into Kuber-native JSON."}),"\n",(0,r.jsx)(n.li,{children:"Enables clients to subscribe to transaction statuses and state updates."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);