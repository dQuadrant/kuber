"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6227],{3462:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"hydra-js-client/close","title":"close","description":"close is an asynchronous function that closes an active Hydra head. This action finalizes the off-chain transactions and moves the head to a Closed state, eventually allowing funds to be fanned out to the main chain.","source":"@site/docs/hydra-js-client/close.md","sourceDirName":"hydra-js-client","slug":"/hydra-js-client/close","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/close","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/close.md","tags":[],"version":"current","frontMatter":{},"sidebar":"hydraJsClient","previous":{"title":"initialize","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/initialize"},"next":{"title":"fanout","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/fanout"}}');var s=t(4848),r=t(8453);const o={},i="close",c={},l=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"close",children:"close"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"close"})," is an asynchronous function that closes an active Hydra head. This action finalizes the off-chain transactions and moves the head to a ",(0,s.jsx)(n.code,{children:"Closed"})," state, eventually allowing funds to be fanned out to the main chain."]}),"\n",(0,s.jsx)(n.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async close(wait: boolean = false): Promise<any>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"wait"}),": An optional ",(0,s.jsx)(n.code,{children:"boolean"})," indicating whether to wait for the head to be closed. Defaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"Promise"})," that resolves to an object containing information about the close process."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const { loadCrypto } = require("libcardano");\nconst { KuberHydraApiProvider } = require("kuber-client");\n\nasync function main() {\n  await loadCrypto();\n\n  const hydra = new KuberHydraApiProvider("http://localhost:8081"); // Replace with your Hydra API URL\n\n  try {\n    console.log("Closing Hydra head...");\n    const result = await hydra.close(true); // Wait for closure to complete\n    console.log("Hydra head closed:", result);\n  } catch (error) {\n    console.error("Error closing Hydra head:", error);\n  }\n}\n\nmain();\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(6540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);