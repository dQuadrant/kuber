"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6718],{7128:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"hydra-js-client/queryProtocolParameters","title":"queryProtocolParameters","description":"queryProtocolParameters is an asynchronous function that retrieves the current protocol parameters from the Hydra head. These parameters are essential for building and validating transactions on the Cardano blockchain.","source":"@site/docs/hydra-js-client/queryProtocolParameters.md","sourceDirName":"hydra-js-client","slug":"/hydra-js-client/queryProtocolParameters","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/queryProtocolParameters","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/queryProtocolParameters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"hydraJsClient","previous":{"title":"Query UTxOs","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/queryUtxo"},"next":{"title":"queryHeadState","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/queryHeadState"}}');var a=t(4848),o=t(8453);const s={},c="queryProtocolParameters",i={},l=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"queryprotocolparameters",children:"queryProtocolParameters"})}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"queryProtocolParameters"})," is an asynchronous function that retrieves the current protocol parameters from the Hydra head. These parameters are essential for building and validating transactions on the Cardano blockchain."]}),"\n",(0,a.jsx)(r.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"async queryProtocolParameters(): Promise<CommonProtocolParameters>\n"})}),"\n",(0,a.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(r.p,{children:"None."}),"\n",(0,a.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(r.p,{children:["A ",(0,a.jsx)(r.code,{children:"Promise"})," that resolves to a ",(0,a.jsx)(r.code,{children:"CommonProtocolParameters"})," object, containing various network parameters such as ",(0,a.jsx)(r.code,{children:"minFeeA"}),", ",(0,a.jsx)(r.code,{children:"minFeeB"}),", ",(0,a.jsx)(r.code,{children:"maxTxSize"}),", etc."]}),"\n",(0,a.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:'const { loadCrypto } = require("libcardano");\nconst { KuberHydraApiProvider } = require("kuber-client");\n\nasync function main() {\n  await loadCrypto();\n\n  const hydra = new KuberHydraApiProvider("http://localhost:8081"); // Replace with your Hydra API URL\n\n  try {\n    const protocolParams = await hydra.queryProtocolParameters();\n    console.log("Protocol Parameters:", protocolParams);\n  } catch (error) {\n    console.error("Error querying protocol parameters:", error);\n  }\n}\n\nmain();\n'})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>c});var n=t(6540);const a={},o=n.createContext(a);function s(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);