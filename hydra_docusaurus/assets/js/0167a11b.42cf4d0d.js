"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4620],{8139:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"hydra-js-client/abort","title":"abort","description":"abort is an asynchronous function that aborts the initialization of a Hydra head. This action can be used if the head initialization process is stuck or needs to be cancelled before it reaches the Open state.","source":"@site/docs/hydra-js-client/abort.md","sourceDirName":"hydra-js-client","slug":"/hydra-js-client/abort","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/abort","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/abort.md","tags":[],"version":"current","frontMatter":{},"sidebar":"hydraJsClient","previous":{"title":"fanout","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/fanout"},"next":{"title":"contest","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/contest"}}');var a=n(4848),o=n(8453);const i={},s="abort",c={},d=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"abort",children:"abort"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"abort"})," is an asynchronous function that aborts the initialization of a Hydra head. This action can be used if the head initialization process is stuck or needs to be cancelled before it reaches the ",(0,a.jsx)(t.code,{children:"Open"})," state."]}),"\n",(0,a.jsx)(t.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"async abort(wait: boolean = false): Promise<any>\n"})}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"wait"}),": An optional ",(0,a.jsx)(t.code,{children:"boolean"})," indicating whether to wait for the abort to complete. Defaults to ",(0,a.jsx)(t.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(t.p,{children:["A ",(0,a.jsx)(t.code,{children:"Promise"})," that resolves to an object containing information about the abort process."]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:'const { loadCrypto } = require("libcardano");\nconst { KuberHydraApiProvider } = require("kuber-client");\n\nasync function main() {\n  await loadCrypto();\n\n  const hydra = new KuberHydraApiProvider("http://localhost:8081"); // Replace with your Hydra API URL\n\n  try {\n    console.log("Aborting Hydra head initialization...");\n    const result = await hydra.abort(true); // Wait for abort to complete\n    console.log("Hydra head aborted:", result);\n  } catch (error) {\n    console.error("Error aborting Hydra head:", error);\n  }\n}\n\nmain();\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(6540);const a={},o=r.createContext(a);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);