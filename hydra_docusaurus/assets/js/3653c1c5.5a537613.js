"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[124],{4458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tutorials/build_tx","title":"Building Transactions in Hydra","description":"1. Create a Sample Transaction JSON","source":"@site/docs/tutorials/build_tx.md","sourceDirName":"tutorials","slug":"/tutorials/build_tx","permalink":"/kuber/hydra_docusaurus/docs/tutorials/build_tx","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/tutorials/build_tx.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorial","previous":{"title":"Query UTxOs","permalink":"/kuber/hydra_docusaurus/docs/tutorials/query/utxos"},"next":{"title":"Closing the Hydra Head","permalink":"/kuber/hydra_docusaurus/docs/tutorials/close_head"}}');var a=t(4848),r=t(8453);const d={},i="Building Transactions in Hydra",o={},c=[];function l(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"building-transactions-in-hydra",children:"Building Transactions in Hydra"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"1. Create a Sample Transaction JSON"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const createSampleOutputTx = (\n  selectionAddress: string,\n  outputAddress: string\n) => ({\n  selections: [selectionAddress],\n  outputs: [\n    {\n      address: outputAddress,\n      value: 2_000_000,\n      datum: { constructor: 1, fields: [] },\n    },\n    {\n      address: outputAddress,\n      value: 2_000_000,\n      datum: { constructor: 2, fields: [] },\n    },\n  ],\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"2. Generate Address from Key"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { setup } from "libcardano/lib/cardano/crypto";\nimport { Ed25519Key } from "libcardano/cardano/primitives/keys";\nimport { ShelleyWallet } from "libcardano/cardano/primitives/address";\n\nawait setup(); //this is necessary to run Ed25519Key funcitons\n\nconst testWalletSigningKey = await Ed25519Key.fromCardanoCliFile(\n  path.join("src", "example.sk")\n);\nconst testWalletAddress = new ShelleyWallet(testWalletSigningKey).addressBech32(\n  0\n); // 0 = testnet\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"3. Create a Hydra Wallet"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"async function createHydraWallet(\n  service: KuberHydraService,\n  ed25519Key: Ed25519Key,\n  network: 0 | 1\n): Promise<HydraWallet> {\n  try {\n    const shelleyWallet = new ShelleyWallet(ed25519Key);\n    const hydraWallet = new HydraWallet(service, shelleyWallet, network);\n    return hydraWallet;\n  } catch (error: any) {\n    return respondWithError(error);\n  }\n}\n\nconst myWallet = await createHydraWallet(hydraService, testWalletSigningKey, 0);\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"HydraWallet"})," supports CIP-30 functions such as ",(0,a.jsx)(n.code,{children:"getUTxO"}),", ",(0,a.jsx)(n.code,{children:"signData"}),", ",(0,a.jsx)(n.code,{children:"signTx"}),", ",(0,a.jsx)(n.code,{children:"submitTx"}),", etc."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"4. Build the Transaction"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// For the sake of simplicity, we can fund our own address since the protocol fees are `0`.\nconst txBody = createSampleOutputTx(testWalletAddress, testWalletAddress);\nconst buildTxResponse = await hydraService.buildTx(txBody, false); // false = don't submit as we have not signed the transaction yet\n"})}),"\n",(0,a.jsx)(n.p,{children:"The response from this function will provide the transaction details in the following format:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "cborHex": "84a400d90102818258204051dd270c1a51da8645b6c91d23053273547f1f853929fbec5519527e18266d0d0183a300581d60182aeee511419facd4bf4eab7538187288a55a633f579be0cf36897b011a001e8480028201d81843d87b80a300581d60182aeee511419facd4bf4eab7538187288a55a633f579be0cf36897b011a001e8480028201d81843d87b8082581d60182aeee511419facd4bf4eab7538187288a55a633f579be0cf36897b1a00f4240002000ed9010281581c182aeee511419facd4bf4eab7538187288a55a633f579be0cf36897ba0f5f6",\n  "description": "Ledger Cddl Format",\n  "hash": "ff6de11af9d0998a85c3eb5333f4afd173a904164630fc0717be8ee819900d4f",\n  "type": "Unwitnessed Tx ConwayEra"\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"5. Sign and Submit"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const txCborHex = buildTxResponse.cborHex;\nconst signature = await myWallet.signTx(txCborHex);\n"})}),"\n",(0,a.jsx)(n.p,{children:"The wallet's signTx function returns a witness set in cbor hex format. To add this witness set to the transaction, we need to merge the witnesses."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const signedTxHex = txWithMergedSignature(txCborHex, signature);\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now, we have the signed transaction that we can submit to the hydra head."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'const submissionResult = await myWallet.submitTx(signedTxHex);\nconsole.log("Tx Submitted: ", submissionResult);\n'})}),"\n",(0,a.jsx)(n.p,{children:"The response from the wallet is the signed transction cbor hex upon successful submission."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var s=t(6540);const a={},r=s.createContext(a);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);