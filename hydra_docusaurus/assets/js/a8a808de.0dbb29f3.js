"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3870],{7341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"hydra-js-client/submitTx","title":"submitTx","description":"submitTx is an asynchronous function that submits a signed transaction (in CBOR format) to the Cardano blockchain via the Kuber API. This function is typically used after a transaction has been built and signed.","source":"@site/docs/hydra-js-client/submitTx.md","sourceDirName":"hydra-js-client","slug":"/hydra-js-client/submitTx","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/submitTx","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/submitTx.md","tags":[],"version":"current","frontMatter":{},"sidebar":"hydraJsClient","previous":{"title":"buildTx","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/buildTx"},"next":{"title":"\u2699\ufe0f\ud83d\udc32 Kuber-Hydra API Reference","permalink":"/kuber/hydra_docusaurus/docs/kuber-hydra-api-reference"}}');var s=t(4848),i=t(8453);const a={},o="submitTx",c={},d=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"submittx",children:"submitTx"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"submitTx"})," is an asynchronous function that submits a signed transaction (in CBOR format) to the Cardano blockchain via the Kuber API. This function is typically used after a transaction has been built and signed."]}),"\n",(0,s.jsx)(n.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async submitTx(cborString: HexString): Promise<CommonTxObject>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cborString"}),": A ",(0,s.jsx)(n.code,{children:"HexString"})," representing the CBOR-encoded, signed transaction."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"Promise"})," that resolves to a ",(0,s.jsx)(n.code,{children:"CommonTxObject"})," representing the submitted transaction."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const { loadCrypto } = require("libcardano");\nconst { KuberHydraApiProvider } = require("kuber-client");\n\nasync function main() {\n  await loadCrypto();\n\n  const hydra = new KuberHydraApiProvider("http://localhost:8081"); // Replace with your Hydra API URL\n\n  // This is a placeholder. In a real application, you would build and sign a transaction\n  // to get a valid CBOR string.\n  const signedCborTx = "840081825820..."; // Replace with your signed CBOR transaction string\n\n  try {\n    console.log("Submitting transaction...");\n    const result = await hydra.submitTx(signedCborTx);\n    console.log("Transaction submitted:", result);\n  } catch (error) {\n    console.error("Error submitting transaction:", error);\n  }\n}\n\nmain();\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);