"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3781],{3295:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"hydra-js-client/queryHeadState","title":"queryHeadState","description":"queryHeadState is an asynchronous function that retrieves the current state of the Hydra head. This function is useful for monitoring the lifecycle of the head (e.g., Idle, Initializing, Open, Closed, Fanout).","source":"@site/docs/hydra-js-client/queryHeadState.md","sourceDirName":"hydra-js-client","slug":"/hydra-js-client/queryHeadState","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/queryHeadState","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/queryHeadState.md","tags":[],"version":"current","frontMatter":{},"sidebar":"hydraJsClient","previous":{"title":"queryProtocolParameters","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/queryProtocolParameters"},"next":{"title":"initialize","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/initialize"}}');var a=r(4848),s=r(8453);const i={},o="queryHeadState",d={},c=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"queryheadstate",children:"queryHeadState"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"queryHeadState"})," is an asynchronous function that retrieves the current state of the Hydra head. This function is useful for monitoring the lifecycle of the head (e.g., ",(0,a.jsx)(t.code,{children:"Idle"}),", ",(0,a.jsx)(t.code,{children:"Initializing"}),", ",(0,a.jsx)(t.code,{children:"Open"}),", ",(0,a.jsx)(t.code,{children:"Closed"}),", ",(0,a.jsx)(t.code,{children:"Fanout"}),")."]}),"\n",(0,a.jsx)(t.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"async queryHeadState(): Promise<{ state: string }>\n"})}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(t.p,{children:"None."}),"\n",(0,a.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(t.p,{children:["A ",(0,a.jsx)(t.code,{children:"Promise"})," that resolves to an object with a ",(0,a.jsx)(t.code,{children:"state"})," property, which is a string indicating the current state of the Hydra head."]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:'const { loadCrypto } = require("libcardano");\nconst { KuberHydraApiProvider } = require("kuber-client");\n\nasync function main() {\n  await loadCrypto();\n\n  const hydra = new KuberHydraApiProvider("http://localhost:8081"); // Replace with your Hydra API URL\n\n  try {\n    const headState = await hydra.queryHeadState();\n    console.log("Current Head State:", headState.state);\n  } catch (error) {\n    console.error("Error querying head state:", error);\n  }\n}\n\nmain();\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var n=r(6540);const a={},s=n.createContext(a);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);