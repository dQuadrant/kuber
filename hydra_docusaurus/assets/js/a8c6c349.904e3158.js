"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5048],{1143:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"hydra-js-client/examples/submitting-hydra-transactions","title":"Building and Submitting TXs","description":"This guide demonstrates how to build and submit transactions within an open Hydra Head using the cip30 interface and KuberHydraApiProvider.","source":"@site/docs/hydra-js-client/examples/submitting-hydra-transactions.md","sourceDirName":"hydra-js-client/examples","slug":"/hydra-js-client/examples/submitting-hydra-transactions","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/examples/submitting-hydra-transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/examples/submitting-hydra-transactions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Building and Submitting TXs"},"sidebar":"hydraJsClient","previous":{"title":"Commiting - Using cip-30","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/examples/commiting-utxos-to-hydra"},"next":{"title":"Query UTxOs","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/queryUtxo"}}');var r=t(4848),a=t(8453);const s={sidebar_position:3,sidebar_label:"Building and Submitting TXs"},d="Building and Submitting TXs",l={},o=[{value:"Prerequisites",id:"prerequisites",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"building-and-submitting-txs",children:"Building and Submitting TXs"})}),"\n",(0,r.jsxs)(n.p,{children:["This guide demonstrates how to build and submit transactions within an open Hydra Head using the cip30 interface and ",(0,r.jsx)(n.code,{children:"KuberHydraApiProvider"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Node.js environment"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"libcardano"})," and ",(0,r.jsx)(n.code,{children:"libcardano-wallet"})," installed."]}),"\n",(0,r.jsx)(n.li,{children:'An active Hydra Head (in "Open" state).'}),"\n",(0,r.jsxs)(n.li,{children:["A configured ",(0,r.jsx)(n.code,{children:"KuberHydraApiProvider"})," instance."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This example demonstrates how to build and submit a simple transaction (sending Lovelace to an address) within an open Hydra Head using the ",(0,r.jsx)(n.code,{children:"KuberHydraApiProvider"})," and a CIP-30 compatible wallet."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { KuberHydraApiProvider } from "kuber-client"; // Adjust path as needed\nimport { Value,Ed25519Key ,loadCrypto } from "libcardano";\nimport { ShelleyWallet, Cip30ShelleyWallet } from "libcardano-wallet";\nimport { readFileSync } from "fs";\n\nasync function runBuildAndSubmitTransactionExample() {\n  // Initialize Hydra API Provider (replace with your Hydra node URL)\n  const hydra = new KuberHydraApiProvider("http://172.31.6.1:8082");\n\n  // Load test wallet signing key\n  const testWalletSigningKey = await Ed25519Key.fromCardanoCliJson(\n    JSON.parse(readFileSync(process.env.HOME + "/.cardano/preview/hydra-0/credentials/funds.sk", "utf-8")),\n  );\n\n  // Setup libcardano crypto and Shelley wallet\n  await loadCrypto();\n  const shelleyWallet = new ShelleyWallet(testWalletSigningKey);\n  const cip30Wallet = new Cip30ShelleyWallet(hydra, hydra, shelleyWallet, 0);\n  const walletAddress = (await cip30Wallet.getChangeAddress()).toBech32();\n\n  console.log("Wallet Address:", walletAddress);\n\n  // Ensure head is in \'Open\' state\n  const headState = await hydra.queryHeadState();\n  if (headState.state !== "Open") {\n    console.log("Head is not in \'Open\' state. Please ensure it\'s in \'Open\' state before running this example.");\n    return;\n  }\n  console.log("Hydra Head is Open. Proceeding with transaction.");\n\n  // Define the transaction outputs\n  const transaction = {\n    outputs: [{ address: walletAddress, value: { lovelace: "3000000" } }], // Sending 3 ADA\n    changeAddress: walletAddress,\n  };\n\n  try {\n    // Use the buildAndSubmitWithWallet function from KuberProvider\n    const submitResult = await hydra.buildAndSubmitWithWallet(cip30Wallet, transaction);\n    console.log("Transaction submitted to Hydra Head. Result:", submitResult);    \n\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      console.error("Error building or submitting transaction:", error.message);\n    } else {\n      console.error("An unknown error occurred:", error);\n    }\n  }\n}\n\nrunBuildAndSubmitTransactionExample();\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);