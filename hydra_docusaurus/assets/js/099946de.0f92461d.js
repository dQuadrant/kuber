"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9275],{4386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"hydra-js-client/contest","title":"contest","description":"contest is an asynchronous function that allows a participant to contest a transaction in a Hydra head. This is typically used during the Closed state if there\'s a disagreement about the final state of the head.","source":"@site/docs/hydra-js-client/contest.md","sourceDirName":"hydra-js-client","slug":"/hydra-js-client/contest","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/contest","draft":false,"unlisted":false,"editUrl":"https://github.com/dQuadrant/kuber/tree/feat/hydra/docs/hydra-js-client/contest.md","tags":[],"version":"current","frontMatter":{},"sidebar":"hydraJsClient","previous":{"title":"abort","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/abort"},"next":{"title":"commit","permalink":"/kuber/hydra_docusaurus/docs/hydra-js-client/commit"}}');var s=n(4848),a=n(8453);const o={},c="contest",i={},d=[{value:"Function Signature",id:"function-signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"contest",children:"contest"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"contest"})," is an asynchronous function that allows a participant to contest a transaction in a Hydra head. This is typically used during the ",(0,s.jsx)(t.code,{children:"Closed"})," state if there's a disagreement about the final state of the head."]}),"\n",(0,s.jsx)(t.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"async contest(wait: boolean = false): Promise<any>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"wait"}),": An optional ",(0,s.jsx)(t.code,{children:"boolean"})," indicating whether to wait for the contest to complete. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"Promise"})," that resolves to an object containing information about the contest process."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'const { loadCrypto } = require("libcardano");\nconst { KuberHydraApiProvider } = require("kuber-client");\n\nasync function main() {\n  await loadCrypto();\n\n  const hydra = new KuberHydraApiProvider("http://localhost:8081"); // Replace with your Hydra API URL\n\n  try {\n    console.log("Contesting Hydra head...");\n    const result = await hydra.contest(true); // Wait for contest to complete\n    console.log("Hydra head contested:", result);\n  } catch (error) {\n    console.error("Error contesting Hydra head:", error);\n  }\n}\n\nmain();\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(6540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);